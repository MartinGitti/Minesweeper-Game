{"version":3,"sources":["Images/bomb.png","Components/Game/BoardHead.js","Components/Game/Cell.js","Components/Game/Rows.js","Components/Game/Board.js","Components/Game/Minesweeper.js","Components/Rules/Rules.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoardHead","props","minutes","Math","floor","time","formattedSeconds","status","className","role","aria-label","flagsUsed","onClick","reset","Cell","data","isOpen","hasMine","onContextMenu","e","preventDefault","open","count","flag","hasFlag","Row","cells","map","index","key","Board","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","random","randomCol","cell","state","setState","changeFlagAmount","Promise","resolve","findMines","then","numberOfMines","current","openCells","console","log","newRows","onCellClick","openAroundCell","alert","endGame","minesInProximity","row","col","length","nextProps","this","Component","Minesweeper","checkForWinner","gameStatus","setInterval","fn","t","intervals","clearInterval","Object","assign","baseState","tick","amount","flagCount","handleCellClick","prevState","nextState","Rules","React","App","src","logo","alt","height","to","activeClassName","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34908579.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.3d4bf63d.png\";","import React from \"react\"; // Import React library.\r\nimport '../../Stylesheet/Stylesheet.css'; // Import applicable Style Sheet.\r\n\r\n/* Import React typechecking property to check for bugs: */\r\nimport PropTypes from \"prop-types\";\r\n\r\n// Craete Boardhead that contains timer, flag count and reset button.\r\nconst BoardHead = props => {\r\n  // Variables for minutes and seconds.\r\n  let minutes = Math.floor(props.time / 60); // Use math.floor to round time off to nearest integral.\r\n  let formattedSeconds = props.time - minutes * 60 || 0;\r\n\r\n  formattedSeconds =\r\n    // ternary operator:\r\n    formattedSeconds < 10 ? `0${formattedSeconds}` : formattedSeconds; // If seconds are less than 10, then zero will be infront of it.\r\n  let time = `${minutes}:${formattedSeconds}`; // Time variable using string literals.\r\n  let status =\r\n    props.status === \"running\" || props.status === \"waiting\" ? (\r\n      // Happy face emoji added for running and waiting game mode.\r\n      <span className='happy-face' role='img' aria-label='angel face'>&#128519;</span>\r\n    ) : (\r\n        // Sad face emoji added for end of game mode.\r\n        <span className=\"sad-face\" role='img' aria-label='crushed face'>&#128534;</span>\r\n      );\r\n  return (\r\n    <div className=\"board-head\">\r\n      <div className=\"flag-count\"> Flags: {props.flagsUsed}</div> {/* Pass in flag count. */}\r\n      <button className=\"reset\" onClick={props.reset}> {/* Pass through reset button. */}\r\n        {status}\r\n      </button>\r\n      <div className=\"timer\">Time: {time}</div> {/* Pass through time. */}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Ensure that data received is valid:\r\nBoardHead.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  flagsUsed: PropTypes.number.isRequired\r\n};\r\n\r\nexport default BoardHead;","import React from \"react\"; // Import React library.\r\n\r\n/*\r\n Create stateless Cell Component that will pass information down.\r\n ALl conditions of when cell is clicked are passed down below.\r\n */\r\nconst Cell = props => {\r\n  let cell = () => {\r\n    if (props.data.isOpen) { // If cell is open condition.\r\n      if (props.data.hasMine) { // If cell has a mine condition.\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => { // Add mouse click event handler.\r\n              e.preventDefault(); // Prevent default browser behaviour.\r\n            }}\r\n            onClick={() => props.open(props.data)} // Pass in data on click.\r\n          >\r\n            <span className='mine' role='img' aria-label='mine'>&#128165;</span> {/* Mine image code is wrapped between span tags. */}\r\n          </div>\r\n        );\r\n      } else if (props.data.count === 0) { // Board game cell conditions:\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            {props.data.count}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n      return (\r\n        <div\r\n          className=\"cell open-flag\"\r\n          onContextMenu={e => {\r\n\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        >\r\n          <span role='img' aria-label='flag'>&#127988;</span> {/* Flag Image code. */}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;","import React from \"react\"; // Import React library.\r\nimport Cell from \"./Cell\"; // Import neccessary Component.\r\n\r\n// Create stateless Row component that contains all of cells.\r\nconst Row = props => {\r\n  let cells = props.cells.map((data, index) => ( // Create bunch of cells that will contain data and index.\r\n    <Cell data={data} open={props.open} flag={props.flag} key={index} />\r\n  ));\r\n  return <div className=\"row\">{cells}</div>; // Return the cells that were made.\r\n};\r\n\r\nexport default Row;","import React, { Component } from \"react\"; // Import React library.\r\nimport '../../Stylesheet/Stylesheet.css'; // Import style sheet for this component.\r\nimport Row from './Rows'; // Import Neccessary Component.\r\n\r\n// Class Component:\r\nclass Board extends Component {\r\n  // Constructor with props passed to it.\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Set state where rows of the board are equal to the following:\r\n    this.state = {\r\n      rows: this.createBoard(props) // Pass props through to createBoard.\r\n    };\r\n  }\r\n\r\n  /* Code below is needed to update the state in response to prop changes i.e. to reset it */\r\n  componentWillReceiveProps(nextProps) {\r\n    if (\r\n      this.props.openCells > nextProps.openCells ||\r\n      this.props.columns !== nextProps.columns\r\n    ) {\r\n      this.setState({\r\n        rows: this.createBoard(nextProps)\r\n      });\r\n    }\r\n  }\r\n\r\n  createBoard = props => {\r\n    /* 2D grid created for the board game based on the number of columns and rows passed in from props. */\r\n    let board = []; // Create an empty array for the board.\r\n    /* Nested for loop below to add in rows and coloumns. */\r\n    for (let i = 0; i < props.rows; i++) {\r\n      board.push([]); // Add new array to every cell which has different properties.\r\n      for (let j = 0; j < props.columns; j++) { // Loop through all coloumns.\r\n        board[i].push({ // push in one object into each of the cells.\r\n          x: j, // X position of board.\r\n          y: i, // Y position of board.\r\n          count: 0, // Indicates number of nearby mines.\r\n          isOpen: false, // Cells start off closed until clicked by user.\r\n          hasMine: false, // Initially none of the cells will have a mine.\r\n          hasFlag: false // Initially none of the cells will have a flag.\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add in randomly placed mines using for loop & Math.random() method.\r\n    for (let i = 0; i < props.mines; i++) {\r\n      let randomRow = Math.floor(Math.random() * props.rows); // Use math.random function to create random rows.\r\n      let randomCol = Math.floor(Math.random() * props.columns); // Use math.random function to create random columns.\r\n\r\n      let cell = board[randomRow][randomCol];\r\n\r\n      // Prevent cells from having multiple mines by passing additional mine into another random cell. \r\n      if (cell.hasMine) {\r\n        i--;\r\n      } else {\r\n        cell.hasMine = true;\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  // Allow user to add and remove flags from cells: \r\n  flag = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    let rows = this.state.rows;\r\n\r\n    cell.hasFlag = !cell.hasFlag;\r\n    this.setState({ rows });\r\n    this.props.changeFlagAmount(cell.hasFlag ? -1 : 1); // If cell has a flag, minus 1 otherwise add 1 to flag amount when flag is removed.\r\n  };\r\n\r\n  open = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    // Promise that finds mines around current cell asyncchronously and calculates the mines before anything else runs. \r\n    let asyncCountMines = new Promise(resolve => {\r\n      let mines = this.findMines(cell);\r\n      resolve(mines);\r\n    });\r\n\r\n    // Get rows by getting current cell that has been clicked on using its position on the board. \r\n    asyncCountMines.then(numberOfMines => {\r\n      let rows = this.state.rows;\r\n\r\n      let current = rows[cell.y][cell.x];\r\n\r\n      /* Prevent mine from being on first user click, log it to the console and update the board. */\r\n      if (current.hasMine && this.props.openCells === 0) {\r\n        console.log(\"first click had a mine!\");\r\n        let newRows = this.createBoard(this.props); // Create new set of rows when first click contains a mine.\r\n        this.setState({ rows: newRows }, () => { // Reset rows and open cell that user is at and check again.\r\n          this.open(cell);\r\n        });\r\n      } else {\r\n        if (!cell.hasFlag && !current.isOpen) { // if cell does not have a flag || isn't open, then call function.\r\n          this.props.onCellClick();\r\n\r\n          current.isOpen = true; // Current cell is open when clicked.\r\n          current.count = numberOfMines; // Find number od mines that are near the current cell.\r\n\r\n          this.setState({ rows });\r\n          // if cell does not have a flag or mine, the cells around it should be open.\r\n          if (!current.hasMine && numberOfMines === 0) {\r\n            this.openAroundCell(cell);\r\n          }\r\n\r\n          if (current.hasMine && this.props.openCells !== 0) { // End game when cell is opened and has a mine in it.\r\n            alert('Game over, you triggered a mine! Click on the face to start over.');\r\n            this.props.endGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  findMines = cell => {\r\n    let minesInProximity = 0; // Increment when a surrounding cell has a mine that is set to true.\r\n    // Search for the nearby mines within the surrounding cells.\r\n    for (let row = -1; row <= 1; row++) { // Use indexing to loop through cells that have mines surrounding current cell.\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) { // Prevent cells out of board to do nothing to avoid reference errors.\r\n          if (\r\n            cell.y + row < this.state.rows.length && // Ensure that cell falls within the board game.\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              this.state.rows[cell.y + row][cell.x + col].hasMine && // Check if cell has a mine or not within board range.\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              minesInProximity++; // Count surrounding mines within range around current cell.\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return minesInProximity; // Return mines in proximity.\r\n  };\r\n\r\n  openAroundCell = cell => {\r\n    let rows = this.state.rows;\r\n\r\n    // Loop through each neighboring cell around current cell until a cell with a mine in it, is found.\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (\r\n            cell.y + row < this.state.rows.length &&\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              !this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n              !rows[cell.y + row][cell.x + col].isOpen\r\n            ) {\r\n              this.open(rows[cell.y + row][cell.x + col]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.rows.map((cells, index) => ( // Create list of rows using map function and add in propperties.\r\n      <Row\r\n        cells={cells}\r\n        open={this.open}\r\n        flag={this.flag}\r\n        key={index} // Key value added to uniquely identify component.\r\n      />\r\n    ));\r\n    return <div className=\"board\">{rows}</div>; // Return div that displays all of the rows in the board.\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from \"react\"; // Import React library.\r\nimport '../../Stylesheet/Stylesheet.css'; // Import applicable Style Sheet.\r\n\r\n/* Import all neccessary components: */\r\nimport BoardHead from \"./BoardHead\";\r\nimport Board from \"./Board\";\r\n\r\n/* App class Component that has state: */\r\nclass Minesweeper extends Component {\r\n  constructor() {\r\n    super();\r\n    /* State for minesweeper game that holds info to influence the output of render: */\r\n    this.state = {\r\n      gameStatus: \"waiting\", // Game can be in waiting, running or end game mode. Game starts off as waiting until user clicks a cell.\r\n      time: 0, // Time for each round.\r\n      flagCount: 10, // 10 Flags allowed per round.\r\n      openCells: 0, // All cells start off closed at the start of each round and track all open cells after they are clicked.\r\n      mines: 10, // Total of 10 mines are dispersed randomly across the board.\r\n      rows: 10, // Amount of rows for board.\r\n      columns: 10, // Amount of columns for board.\r\n    };\r\n    this.baseState = this.state; // JavaScript feature to add new properties to any object dynamically.\r\n  }\r\n\r\n  /* React component method that helps when state changes. */\r\n  componentDidUpdate(nextProps, nextState) {\r\n    if (this.state.gameStatus === \"running\") {\r\n      this.checkForWinner(); // Pass through 'checkForWinner' function.\r\n    }\r\n  }\r\n\r\n  /* Function that will anounce the 'winning of game' when game's goal is achieved. */\r\n  checkForWinner = () => {\r\n    // If statement to return winner notification if all mines are missed.\r\n    if (this.state.mines + this.state.openCells >= this.state.rows * this.state.columns) {\r\n      this.setState({\r\n        gameStatus: \"winner\"\r\n      }, alert(\"Congratulations, you mananged to survive without activating any mines!\"))\r\n    }\r\n  }\r\n\r\n  /* Life cycle method that handles configuration, updates of state and prepares for first render. */\r\n  componentWillMount() {\r\n    this.intervals = [];\r\n  }\r\n\r\n  // Function that wraps in funtion and the amount of time it takes to run.\r\n  setInterval = (fn, t) => {\r\n    this.intervals.push(setInterval(fn, t)); // Push in interval using function & time.\r\n  };\r\n\r\n  // Reset function to start  new round with mines shuffled.\r\n  reset = () => {\r\n    this.intervals.map(clearInterval);\r\n    this.setState(Object.assign({}, this.baseState), () => {\r\n      this.intervals = [];\r\n    });\r\n  };\r\n\r\n  /* Function that ticks seconds as soon as game goes into running mode. */\r\n  tick = () => {\r\n    if (this.state.openCells > 0 && this.state.gameStatus === \"running\") {\r\n      let time = this.state.time + 1; // Add 1 to time.\r\n      this.setState({ time });\r\n    }\r\n  };\r\n\r\n  /* Function for end of game. */\r\n  endGame = () => {\r\n    this.setState({\r\n      gameStatus: \"ended\"\r\n    });\r\n  };\r\n\r\n  /* Function that counts down how many flags have been used. */\r\n  changeFlagAmount = amount => {\r\n    if (this.state.flagCount < 0) {\r\n      alert('You are using more than given the flags for this round!');\r\n    }\r\n    this.setState({ flagCount: this.state.flagCount + amount });\r\n  };\r\n\r\n  // If the game hasn't started yet, the game will move into running status when user clicks on a cell.\r\n  handleCellClick = () => {\r\n    if (this.state.openCells === 0 && this.state.gameStatus !== \"running\") {\r\n      this.setState(\r\n        {\r\n          gameStatus: \"running\"\r\n        },\r\n        this.setInterval(this.tick, 1000) // Timer will start as soon as user clicks on a cell and will increment time in seconds by passing in tick function.\r\n      );\r\n    }\r\n    this.setState(prevState => {\r\n      return { openCells: prevState.openCells + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"minesweeper\">\r\n        <h1>Welcome to minesweeper!</h1>\r\n        <h2>☼ Survive & don't blow up! ☼</h2>\r\n\r\n        <BoardHead // Game BoardHead component.\r\n          time={this.state.time} // Pass in time to render timer.\r\n          flagsUsed={this.state.flagCount} // Pass in flag count to render flags used.\r\n          reset={this.reset}\r\n          status={this.state.gameStatus}\r\n        />\r\n        <Board // Game Board Component.\r\n          openCells={this.state.openCells} // Let board know how many cells are open.\r\n          mines={this.state.mines} // Pass through amount of mines in board.\r\n          rows={this.state.rows} // Pass in rows.\r\n          columns={this.state.columns} // Pass in columns.\r\n          endGame={this.endGame} // Game goes into 'ended' status when mine is clicked.\r\n          status={this.state.gameStatus} // Can be waiting, running or ended.\r\n          onCellClick={this.handleCellClick} // Pass in what happens when cell is clicked.\r\n          changeFlagAmount={this.changeFlagAmount} // Change flag amount as used.\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minesweeper;","import React from 'react';\r\nimport '../../Stylesheet/Stylesheet.css';\r\n\r\nclass Rules extends React.Component {\r\n    render(){\r\n    return (\r\n    <div className='rules-container'>\r\n        <h1>Rules of Minesweeper</h1>\r\n        <hr/>\r\n        <h2>Goal of Minesweeper Game:</h2>\r\n        <p>\r\n        Work your way around the board, avoiding any hidden mines with use of the indicating number of nearby mines that the tiles displays when clicked, this will give you an idea of which tiles to avoid.\r\n\r\n        The mines are dispersed randomly accross the board with each round. \r\n        \r\n        If you suspect a tile to hold a mine, make use of the flags by right-clicking on a tile.\r\n\r\n        If you manage to open all the tiles that do not hold a mine, you win the round!\r\n        </p>\r\n        <h2> RULES OF MINESWEEPER GAME: </h2>\r\n        <p>\r\n            Click on various tiles in order to display what the tile holds.\r\n\r\n            Beware though not to click on a tile that holds a mine because that will be the end of the round.\r\n\r\n            Use the the indicating numbers of all the surrounding mines neighboring the tile clicked upon.\r\n\r\n            Tip: Each tile has only eight tiles that surround it.\r\n\r\n            There are 10 flags available to place in the positions where mines are suspected to be, by using the right-click mouse button.\r\n\r\n            You are also able to claim a flag back by right-clicking on a tile that already has a flag.\r\n\r\n            If you happen to click on a tile that hold a hidden mine, the round will end. You can carry on playing by clicking on the emoji face that will reset the board, allow you to play a new round of minesweeper.\r\n            \r\n            Open all the tiles that don't have a mine in order to win the round. Don't worry, you will get the hang of the game rather quickly. Be smart, be calm and sweep past all the mines.\r\n        </p>\r\n    </div>\r\n    )}\r\n}\r\n\r\nexport default Rules;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'; // React Library.\nimport logo from './Images/bomb.png'; // Page Image.\nimport './Stylesheet/Stylesheet.css'; // Style Sheet.\nimport { BrowserRouter as Router, Switch, Route, NavLink } from 'react-router-dom'; // React Routing Components.\n\n// All Created Components:\nimport Minesweeper from './Components/Game/Minesweeper';\nimport Rules from './Components/Rules/Rules';\n\n// Main App component:\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-heading\">\n            <span role=\"img\" aria-label=\"controller\">🎮</span>\n            Welcome to Minesweeper\n            <span role=\"img\" aria-label=\"controller\">🎮</span>\n          </h1>\n          <img src={logo} className=\"app-image\" alt=\"logo\" height=\"300px\" />\n          <div className=\"nav-links\">\n          <button className='buttons'>\n              <NavLink to=\"/minesweeper\" activeClassName='game-board'>\n                Get Started! <span role=\"img\" aria-label=\"controller\">🚩</span>\n              </NavLink>\n            </button>\n            <br />\n            <button className='buttons'>\n              <NavLink to=\"/rules\" activeClassName='game-rules'>\n                Rules of Minesweeper <span role=\"img\" aria-label=\"controller\">📜</span>\n              </NavLink>\n            </button>\n            <br />\n            <button className='buttons'>\n              <NavLink to=\"/\" activeClassName='home-page'>\n                Exit Game <span role=\"img\" aria-label=\"controller\">💣</span>\n              </NavLink>\n            </button>\n          </div>\n        </header>\n        <routing>\n          <Switch>\n            <Route path=\"/minesweeper\">\n              <Minesweeper />\n            </Route>\n            <Route path=\"/rules\">\n              <Rules />\n            </Route>\n          </Switch>\n        </routing>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}